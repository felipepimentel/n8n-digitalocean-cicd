name: Deploy n8n (GitHub Actions)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: write

env:
  DOCKER_REGISTRY: registry.digitalocean.com
  DROPLET_NAME: n8n
  N8N_VERSION: 1.24.1
  N8N_BASIC_AUTH_USER: admin
  N8N_TEST_PASSWORD: ${{ secrets.N8N_TEST_PASSWORD }}
  N8N_TEST_ENCRYPTION_KEY: ${{ secrets.N8N_TEST_ENCRYPTION_KEY }}
  N8N_DOMAIN: n8n.pepper88.com

jobs:
  validate:
    name: Validate environment
    runs-on: ubuntu-latest
    outputs:
      domain: ${{ env.N8N_DOMAIN }}
      encryption_key: ${{ steps.setup_key.outputs.encryption_key }}
      auth_password: ${{ steps.setup_password.outputs.auth_password }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup encryption key
        id: setup_key
        run: |
          if [ -n "${{ secrets.N8N_ENCRYPTION_KEY }}" ]; then
            echo "Using existing encryption key"
            echo "encryption_key=${{ secrets.N8N_ENCRYPTION_KEY }}" >> $GITHUB_OUTPUT
          else
            echo "Generating new encryption key"
            key_value=$(openssl rand -hex 16)
            echo "encryption_key=$key_value" >> $GITHUB_OUTPUT
          fi

      - name: Setup password
        id: setup_password
        run: |
          if [ -n "${{ secrets.N8N_BASIC_AUTH_PASS }}" ]; then
            echo "Using existing password"
            echo "auth_password=${{ secrets.N8N_BASIC_AUTH_PASS }}" >> $GITHUB_OUTPUT
          else
            echo "Using test password"
            echo "auth_password=${{ env.N8N_TEST_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate DigitalOcean token
        run: |
          if [ -z "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ]; then
            echo "❌ Error: DIGITALOCEAN_ACCESS_TOKEN is required"
            exit 1
          fi
          echo "✅ DigitalOcean token is set"

      - name: Validate domain
        run: |
          domain="${{ env.N8N_DOMAIN }}"
          if [[ ! "$domain" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
            echo "❌ Error: Invalid domain format: $domain"
            echo "Domain should:"
            echo "- Start with a letter or number"
            echo "- Contain only letters, numbers, dots, and hyphens"
            echo "- End with a valid TLD"
            echo "- Not exceed 253 characters"
            exit 1
          fi
          echo "✅ Domain format is valid: $domain"

      - name: Summary of validations
        run: |
          echo "✅ Environment validation completed successfully"
          echo "Environment: production"
          echo "Domain: ${{ env.N8N_DOMAIN }}"
          echo "Registry: ${{ env.DOCKER_REGISTRY }}"
          echo "N8N Version: ${{ env.N8N_VERSION }}"

  deploy:
    name: Deploy n8n
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Configure Docker
        run: |
          registry_name=$(doctl registry get --format Name --no-header)
          if [ -z "$registry_name" ]; then
            echo "❌ Error: Failed to get registry name"
            exit 1
          fi
          doctl registry login

      - name: Deploy n8n
        working-directory: ci
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          N8N_DOMAIN: ${{ needs.validate.outputs.domain }}
          N8N_ENCRYPTION_KEY: ${{ needs.validate.outputs.encryption_key }}
          N8N_BASIC_AUTH_USER: admin
          N8N_BASIC_AUTH_PASS: ${{ needs.validate.outputs.auth_password }}
        run: |
          go build -o deploy
          ./deploy
